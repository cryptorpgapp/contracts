// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// KeeperCompatible.sol imports the functions from both ./KeeperBase.sol and
// ./interfaces/KeeperCompatibleInterface.sol
import "@chainlink/contracts/src/v0.8/KeeperCompatible.sol";

contract KeeperDelegate is KeeperCompatibleInterface {
    /**
    * Public counter variable
    */
    address public delegate;

    constructor(address delegate_) {
      delegate = delegate_;
    }

    function checkUpkeep(bytes calldata checkData) external override returns (bool upkeepNeeded, bytes memory /*performData*/) {
        (bool upkeepNeeded_,) = KeeperCompatibleInterface(delegate).checkUpkeep(checkData);
        upkeepNeeded = upkeepNeeded_;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata performData) external override {
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
        KeeperCompatibleInterface(delegate).performUpkeep(performData);
    }
}
